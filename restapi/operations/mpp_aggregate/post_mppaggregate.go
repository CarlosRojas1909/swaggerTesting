// Code generated by go-swagger; DO NOT EDIT.

package mpp_aggregate

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostMppaggregateHandlerFunc turns a function with the right signature into a post mppaggregate handler
type PostMppaggregateHandlerFunc func(PostMppaggregateParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostMppaggregateHandlerFunc) Handle(params PostMppaggregateParams) middleware.Responder {
	return fn(params)
}

// PostMppaggregateHandler interface for that can handle valid post mppaggregate params
type PostMppaggregateHandler interface {
	Handle(PostMppaggregateParams) middleware.Responder
}

// NewPostMppaggregate creates a new http.Handler for the post mppaggregate operation
func NewPostMppaggregate(ctx *middleware.Context, handler PostMppaggregateHandler) *PostMppaggregate {
	return &PostMppaggregate{Context: ctx, Handler: handler}
}

/* PostMppaggregate swagger:route POST /mppaggregate mppAggregate postMppaggregate

endpoint for predefined aggregate queries

Endpoint accepts a series of query objects to be performed in an aggregate array


*/
type PostMppaggregate struct {
	Context *middleware.Context
	Handler PostMppaggregateHandler
}

func (o *PostMppaggregate) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostMppaggregateParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
