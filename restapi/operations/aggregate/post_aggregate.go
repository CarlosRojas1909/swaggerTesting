// Code generated by go-swagger; DO NOT EDIT.

package aggregate

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostAggregateHandlerFunc turns a function with the right signature into a post aggregate handler
type PostAggregateHandlerFunc func(PostAggregateParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostAggregateHandlerFunc) Handle(params PostAggregateParams) middleware.Responder {
	return fn(params)
}

// PostAggregateHandler interface for that can handle valid post aggregate params
type PostAggregateHandler interface {
	Handle(PostAggregateParams) middleware.Responder
}

// NewPostAggregate creates a new http.Handler for the post aggregate operation
func NewPostAggregate(ctx *middleware.Context, handler PostAggregateHandler) *PostAggregate {
	return &PostAggregate{Context: ctx, Handler: handler}
}

/* PostAggregate swagger:route POST /aggregate aggregate postAggregate

endpoint for aggregate queries

Endpoint accepts a series of query objects to be performed in an aggregate array


*/
type PostAggregate struct {
	Context *middleware.Context
	Handler PostAggregateHandler
}

func (o *PostAggregate) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostAggregateParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
