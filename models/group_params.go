// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GroupParams group params
//
// swagger:model GroupParams
type GroupParams struct {

	// match on
	// Required: true
	MatchOn []string `json:"matchOn"`

	// operation
	// Required: true
	Operation *string `json:"operation"`

	// operation name
	// Required: true
	OperationName *string `json:"operationName"`

	// operation object
	OperationObject OperationObjectParams `json:"operationObject,omitempty"`

	// operation target
	OperationTarget string `json:"operationTarget,omitempty"`

	// operation targets
	OperationTargets []string `json:"operationTargets"`
}

// Validate validates this group params
func (m *GroupParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMatchOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperationName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GroupParams) validateMatchOn(formats strfmt.Registry) error {

	if err := validate.Required("matchOn", "body", m.MatchOn); err != nil {
		return err
	}

	return nil
}

func (m *GroupParams) validateOperation(formats strfmt.Registry) error {

	if err := validate.Required("operation", "body", m.Operation); err != nil {
		return err
	}

	return nil
}

func (m *GroupParams) validateOperationName(formats strfmt.Registry) error {

	if err := validate.Required("operationName", "body", m.OperationName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this group params based on context it is used
func (m *GroupParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GroupParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GroupParams) UnmarshalBinary(b []byte) error {
	var res GroupParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
