// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LookupParams lookup params
//
// swagger:model LookupParams
type LookupParams struct {

	// lookup as
	// Required: true
	LookupAs *string `json:"lookupAs"`

	// lookup collection
	// Required: true
	LookupCollection *string `json:"lookupCollection"`

	// lookup on
	LookupOn string `json:"lookupOn,omitempty"`

	// lookup on array
	LookupOnArray []string `json:"lookupOnArray"`

	// lookup year
	// Required: true
	LookupYear *string `json:"lookupYear"`

	// project params
	// Required: true
	ProjectParams ProjectParams `json:"projectParams"`
}

// Validate validates this lookup params
func (m *LookupParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLookupAs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLookupCollection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLookupYear(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LookupParams) validateLookupAs(formats strfmt.Registry) error {

	if err := validate.Required("lookupAs", "body", m.LookupAs); err != nil {
		return err
	}

	return nil
}

func (m *LookupParams) validateLookupCollection(formats strfmt.Registry) error {

	if err := validate.Required("lookupCollection", "body", m.LookupCollection); err != nil {
		return err
	}

	return nil
}

func (m *LookupParams) validateLookupYear(formats strfmt.Registry) error {

	if err := validate.Required("lookupYear", "body", m.LookupYear); err != nil {
		return err
	}

	return nil
}

func (m *LookupParams) validateProjectParams(formats strfmt.Registry) error {

	if m.ProjectParams == nil {
		return errors.Required("projectParams", "body", nil)
	}

	return nil
}

// ContextValidate validates this lookup params based on context it is used
func (m *LookupParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *LookupParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LookupParams) UnmarshalBinary(b []byte) error {
	var res LookupParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
