// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// QueryObject query object
//
// swagger:model QueryObject
type QueryObject struct {

	// group query
	GroupQuery *GroupParams `json:"groupQuery,omitempty"`

	// lookup query
	LookupQuery *LookupParams `json:"lookupQuery,omitempty"`

	// match query
	MatchQuery MatchParams `json:"matchQuery,omitempty"`

	// project query
	ProjectQuery ProjectParams `json:"projectQuery,omitempty"`

	// sort query
	SortQuery SortParams `json:"sortQuery,omitempty"`
}

// Validate validates this query object
func (m *QueryObject) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGroupQuery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLookupQuery(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QueryObject) validateGroupQuery(formats strfmt.Registry) error {
	if swag.IsZero(m.GroupQuery) { // not required
		return nil
	}

	if m.GroupQuery != nil {
		if err := m.GroupQuery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("groupQuery")
			}
			return err
		}
	}

	return nil
}

func (m *QueryObject) validateLookupQuery(formats strfmt.Registry) error {
	if swag.IsZero(m.LookupQuery) { // not required
		return nil
	}

	if m.LookupQuery != nil {
		if err := m.LookupQuery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lookupQuery")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this query object based on the context it is used
func (m *QueryObject) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGroupQuery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLookupQuery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QueryObject) contextValidateGroupQuery(ctx context.Context, formats strfmt.Registry) error {

	if m.GroupQuery != nil {
		if err := m.GroupQuery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("groupQuery")
			}
			return err
		}
	}

	return nil
}

func (m *QueryObject) contextValidateLookupQuery(ctx context.Context, formats strfmt.Registry) error {

	if m.LookupQuery != nil {
		if err := m.LookupQuery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lookupQuery")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *QueryObject) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QueryObject) UnmarshalBinary(b []byte) error {
	var res QueryObject
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
