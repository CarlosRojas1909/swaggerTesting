// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PhysicianDrugList physician drug list
//
// swagger:model PhysicianDrugList
type PhysicianDrugList struct {

	// brand claim count num
	BrandClaimCountNum int64 `json:"brandClaimCountNum,omitempty"`

	// brand name percent
	BrandNamePercent float64 `json:"brandNamePercent,omitempty"`

	// city
	City string `json:"city,omitempty"`

	// coordinates
	Coordinates []float64 `json:"coordinates"`

	// generic claim count num
	GenericClaimCountNum int64 `json:"genericClaimCountNum,omitempty"`

	// npi
	Npi string `json:"npi,omitempty"`

	// physician drug list
	PhysicianDrugList []*DrugListing `json:"physicianDrugList"`

	// specialty
	Specialty string `json:"specialty,omitempty"`

	// state
	State string `json:"state,omitempty"`

	// street
	Street string `json:"street,omitempty"`

	// total claim count num
	TotalClaimCountNum int64 `json:"totalClaimCountNum,omitempty"`

	// total drug cost num
	TotalDrugCostNum float64 `json:"totalDrugCostNum,omitempty"`
}

// Validate validates this physician drug list
func (m *PhysicianDrugList) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePhysicianDrugList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PhysicianDrugList) validatePhysicianDrugList(formats strfmt.Registry) error {
	if swag.IsZero(m.PhysicianDrugList) { // not required
		return nil
	}

	for i := 0; i < len(m.PhysicianDrugList); i++ {
		if swag.IsZero(m.PhysicianDrugList[i]) { // not required
			continue
		}

		if m.PhysicianDrugList[i] != nil {
			if err := m.PhysicianDrugList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("physicianDrugList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this physician drug list based on the context it is used
func (m *PhysicianDrugList) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePhysicianDrugList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PhysicianDrugList) contextValidatePhysicianDrugList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PhysicianDrugList); i++ {

		if m.PhysicianDrugList[i] != nil {
			if err := m.PhysicianDrugList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("physicianDrugList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PhysicianDrugList) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PhysicianDrugList) UnmarshalBinary(b []byte) error {
	var res PhysicianDrugList
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
