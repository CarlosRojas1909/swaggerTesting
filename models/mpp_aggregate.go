// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MppAggregate mpp aggregate
//
// swagger:model MppAggregate
type MppAggregate struct {

	// city
	City string `json:"city,omitempty"`

	// data set
	// Required: true
	DataSet *string `json:"dataSet"`

	// drug name
	DrugName string `json:"drugName,omitempty"`

	// map flag
	MapFlag bool `json:"mapFlag,omitempty"`

	// npi
	Npi string `json:"npi,omitempty"`

	// page
	Page int64 `json:"page,omitempty"`

	// region
	// Required: true
	Region *string `json:"region"`

	// region type
	// Required: true
	RegionType *string `json:"regionType"`

	// specialty
	Specialty string `json:"specialty,omitempty"`

	// subject
	// Required: true
	Subject *string `json:"subject"`

	// year
	// Required: true
	Year *string `json:"year"`
}

// Validate validates this mpp aggregate
func (m *MppAggregate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDataSet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegionType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateYear(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MppAggregate) validateDataSet(formats strfmt.Registry) error {

	if err := validate.Required("dataSet", "body", m.DataSet); err != nil {
		return err
	}

	return nil
}

func (m *MppAggregate) validateRegion(formats strfmt.Registry) error {

	if err := validate.Required("region", "body", m.Region); err != nil {
		return err
	}

	return nil
}

func (m *MppAggregate) validateRegionType(formats strfmt.Registry) error {

	if err := validate.Required("regionType", "body", m.RegionType); err != nil {
		return err
	}

	return nil
}

func (m *MppAggregate) validateSubject(formats strfmt.Registry) error {

	if err := validate.Required("subject", "body", m.Subject); err != nil {
		return err
	}

	return nil
}

func (m *MppAggregate) validateYear(formats strfmt.Registry) error {

	if err := validate.Required("year", "body", m.Year); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this mpp aggregate based on context it is used
func (m *MppAggregate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MppAggregate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MppAggregate) UnmarshalBinary(b []byte) error {
	var res MppAggregate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
