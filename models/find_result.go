// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// FindResult find result
//
// swagger:model FindResult
type FindResult struct {

	// d m e p o s detail
	DMEPOSDetail FindObject `json:"DMEPOSDetail,omitempty"`

	// d m e p o s summary
	DMEPOSSummary FindObject `json:"DMEPOSSummary,omitempty"`

	// part a detail inpatient
	PartADetailInpatient FindObject `json:"PartADetailInpatient,omitempty"`

	// part a detail outpatient
	PartADetailOutpatient FindObject `json:"PartADetailOutpatient,omitempty"`

	// part a summary inpatient
	PartASummaryInpatient FindObject `json:"PartASummaryInpatient,omitempty"`

	// part a summary outpatient
	PartASummaryOutpatient FindObject `json:"PartASummaryOutpatient,omitempty"`

	// part b detail
	PartBDetail FindObject `json:"PartBDetail,omitempty"`

	// part b summary
	PartBSummary FindObject `json:"PartBSummary,omitempty"`

	// part d detail
	PartDDetail FindObject `json:"PartDDetail,omitempty"`

	// part d summary
	PartDSummary FindObject `json:"PartDSummary,omitempty"`
}

// Validate validates this find result
func (m *FindResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDMEPOSDetail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDMEPOSSummary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePartADetailInpatient(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePartADetailOutpatient(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePartASummaryInpatient(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePartASummaryOutpatient(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePartBDetail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePartBSummary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePartDDetail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePartDSummary(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FindResult) validateDMEPOSDetail(formats strfmt.Registry) error {
	if swag.IsZero(m.DMEPOSDetail) { // not required
		return nil
	}

	if err := m.DMEPOSDetail.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("DMEPOSDetail")
		}
		return err
	}

	return nil
}

func (m *FindResult) validateDMEPOSSummary(formats strfmt.Registry) error {
	if swag.IsZero(m.DMEPOSSummary) { // not required
		return nil
	}

	if err := m.DMEPOSSummary.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("DMEPOSSummary")
		}
		return err
	}

	return nil
}

func (m *FindResult) validatePartADetailInpatient(formats strfmt.Registry) error {
	if swag.IsZero(m.PartADetailInpatient) { // not required
		return nil
	}

	if err := m.PartADetailInpatient.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("PartADetailInpatient")
		}
		return err
	}

	return nil
}

func (m *FindResult) validatePartADetailOutpatient(formats strfmt.Registry) error {
	if swag.IsZero(m.PartADetailOutpatient) { // not required
		return nil
	}

	if err := m.PartADetailOutpatient.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("PartADetailOutpatient")
		}
		return err
	}

	return nil
}

func (m *FindResult) validatePartASummaryInpatient(formats strfmt.Registry) error {
	if swag.IsZero(m.PartASummaryInpatient) { // not required
		return nil
	}

	if err := m.PartASummaryInpatient.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("PartASummaryInpatient")
		}
		return err
	}

	return nil
}

func (m *FindResult) validatePartASummaryOutpatient(formats strfmt.Registry) error {
	if swag.IsZero(m.PartASummaryOutpatient) { // not required
		return nil
	}

	if err := m.PartASummaryOutpatient.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("PartASummaryOutpatient")
		}
		return err
	}

	return nil
}

func (m *FindResult) validatePartBDetail(formats strfmt.Registry) error {
	if swag.IsZero(m.PartBDetail) { // not required
		return nil
	}

	if err := m.PartBDetail.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("PartBDetail")
		}
		return err
	}

	return nil
}

func (m *FindResult) validatePartBSummary(formats strfmt.Registry) error {
	if swag.IsZero(m.PartBSummary) { // not required
		return nil
	}

	if err := m.PartBSummary.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("PartBSummary")
		}
		return err
	}

	return nil
}

func (m *FindResult) validatePartDDetail(formats strfmt.Registry) error {
	if swag.IsZero(m.PartDDetail) { // not required
		return nil
	}

	if err := m.PartDDetail.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("PartDDetail")
		}
		return err
	}

	return nil
}

func (m *FindResult) validatePartDSummary(formats strfmt.Registry) error {
	if swag.IsZero(m.PartDSummary) { // not required
		return nil
	}

	if err := m.PartDSummary.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("PartDSummary")
		}
		return err
	}

	return nil
}

// ContextValidate validate this find result based on the context it is used
func (m *FindResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDMEPOSDetail(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDMEPOSSummary(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePartADetailInpatient(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePartADetailOutpatient(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePartASummaryInpatient(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePartASummaryOutpatient(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePartBDetail(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePartBSummary(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePartDDetail(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePartDSummary(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FindResult) contextValidateDMEPOSDetail(ctx context.Context, formats strfmt.Registry) error {

	if err := m.DMEPOSDetail.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("DMEPOSDetail")
		}
		return err
	}

	return nil
}

func (m *FindResult) contextValidateDMEPOSSummary(ctx context.Context, formats strfmt.Registry) error {

	if err := m.DMEPOSSummary.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("DMEPOSSummary")
		}
		return err
	}

	return nil
}

func (m *FindResult) contextValidatePartADetailInpatient(ctx context.Context, formats strfmt.Registry) error {

	if err := m.PartADetailInpatient.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("PartADetailInpatient")
		}
		return err
	}

	return nil
}

func (m *FindResult) contextValidatePartADetailOutpatient(ctx context.Context, formats strfmt.Registry) error {

	if err := m.PartADetailOutpatient.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("PartADetailOutpatient")
		}
		return err
	}

	return nil
}

func (m *FindResult) contextValidatePartASummaryInpatient(ctx context.Context, formats strfmt.Registry) error {

	if err := m.PartASummaryInpatient.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("PartASummaryInpatient")
		}
		return err
	}

	return nil
}

func (m *FindResult) contextValidatePartASummaryOutpatient(ctx context.Context, formats strfmt.Registry) error {

	if err := m.PartASummaryOutpatient.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("PartASummaryOutpatient")
		}
		return err
	}

	return nil
}

func (m *FindResult) contextValidatePartBDetail(ctx context.Context, formats strfmt.Registry) error {

	if err := m.PartBDetail.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("PartBDetail")
		}
		return err
	}

	return nil
}

func (m *FindResult) contextValidatePartBSummary(ctx context.Context, formats strfmt.Registry) error {

	if err := m.PartBSummary.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("PartBSummary")
		}
		return err
	}

	return nil
}

func (m *FindResult) contextValidatePartDDetail(ctx context.Context, formats strfmt.Registry) error {

	if err := m.PartDDetail.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("PartDDetail")
		}
		return err
	}

	return nil
}

func (m *FindResult) contextValidatePartDSummary(ctx context.Context, formats strfmt.Registry) error {

	if err := m.PartDSummary.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("PartDSummary")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FindResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FindResult) UnmarshalBinary(b []byte) error {
	var res FindResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
