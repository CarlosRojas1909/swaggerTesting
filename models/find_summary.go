// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FindSummary find summary
//
// swagger:model FindSummary
type FindSummary struct {

	// Must be either Detail or summary
	// Required: true
	// Pattern: ^(Detail|Summary)$
	Collection *string `json:"collection"`

	// Which dataset to query
	// Required: true
	DataSet *string `json:"dataSet"`

	// find
	Find []*FindSummaryFindItems0 `json:"find"`

	// number of results to return
	// Required: true
	// Maximum: 100
	// Minimum: 1
	Limits *int64 `json:"limits"`

	// map flag
	MapFlag bool `json:"mapFlag,omitempty"`

	// output
	Output []string `json:"output"`

	// Sort order is -1, 1 or 0 for not sort
	// Required: true
	// Maximum: 1
	// Minimum: -1
	SortOrder *int64 `json:"sortOrder"`

	// The sort field
	SortType string `json:"sortType,omitempty"`

	// Category of dataset
	SubDataSet string `json:"subDataSet,omitempty"`

	// The year of results
	// Required: true
	// Maximum: 2017
	// Minimum: 2013
	Year *int64 `json:"year"`
}

// Validate validates this find summary
func (m *FindSummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCollection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataSet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFind(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLimits(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSortOrder(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateYear(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FindSummary) validateCollection(formats strfmt.Registry) error {

	if err := validate.Required("collection", "body", m.Collection); err != nil {
		return err
	}

	if err := validate.Pattern("collection", "body", *m.Collection, `^(Detail|Summary)$`); err != nil {
		return err
	}

	return nil
}

func (m *FindSummary) validateDataSet(formats strfmt.Registry) error {

	if err := validate.Required("dataSet", "body", m.DataSet); err != nil {
		return err
	}

	return nil
}

func (m *FindSummary) validateFind(formats strfmt.Registry) error {
	if swag.IsZero(m.Find) { // not required
		return nil
	}

	for i := 0; i < len(m.Find); i++ {
		if swag.IsZero(m.Find[i]) { // not required
			continue
		}

		if m.Find[i] != nil {
			if err := m.Find[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("find" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FindSummary) validateLimits(formats strfmt.Registry) error {

	if err := validate.Required("limits", "body", m.Limits); err != nil {
		return err
	}

	if err := validate.MinimumInt("limits", "body", *m.Limits, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("limits", "body", *m.Limits, 100, false); err != nil {
		return err
	}

	return nil
}

func (m *FindSummary) validateSortOrder(formats strfmt.Registry) error {

	if err := validate.Required("sortOrder", "body", m.SortOrder); err != nil {
		return err
	}

	if err := validate.MinimumInt("sortOrder", "body", *m.SortOrder, -1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("sortOrder", "body", *m.SortOrder, 1, false); err != nil {
		return err
	}

	return nil
}

func (m *FindSummary) validateYear(formats strfmt.Registry) error {

	if err := validate.Required("year", "body", m.Year); err != nil {
		return err
	}

	if err := validate.MinimumInt("year", "body", *m.Year, 2013, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("year", "body", *m.Year, 2017, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this find summary based on the context it is used
func (m *FindSummary) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFind(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FindSummary) contextValidateFind(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Find); i++ {

		if m.Find[i] != nil {
			if err := m.Find[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("find" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *FindSummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FindSummary) UnmarshalBinary(b []byte) error {
	var res FindSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// FindSummaryFindItems0 find summary find items0
//
// swagger:model FindSummaryFindItems0
type FindSummaryFindItems0 struct {

	// The field in the DB to filter
	Field string `json:"Field,omitempty"`

	// The value in the DB to filter
	Value string `json:"Value,omitempty"`
}

// Validate validates this find summary find items0
func (m *FindSummaryFindItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this find summary find items0 based on context it is used
func (m *FindSummaryFindItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FindSummaryFindItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FindSummaryFindItems0) UnmarshalBinary(b []byte) error {
	var res FindSummaryFindItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
